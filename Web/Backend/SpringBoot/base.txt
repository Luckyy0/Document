**** Base concept ****
+ Factory method: Là một design pattern hướng đối tượng, giải quyết vấn đề tạo object mà không 
    cần xác định chính xác lớp nào sẽ được tạo => giảm sự phụ thuộc, che giấu logic khởi tạo
    Cách thực hiện: 
        B1: tạo Interface
        B2: tạo các class implements Interface đó
        B3: tạo class chứa Factory method(input là interface, output là class implements interface đó - 
            dựa vào argument truyền vào, để xác định lớp nào sẽ được tạo)
+ Bean
    Là các object được quản lý bởi Spring IoC container (được coi là xương sống của ứng dụng)
+ org.springframework.context.ApplicationContext interface
    Đại diện cho Spring IoC container
    Chịu trách nhiệm cho khởi tạo, định cấu hình, và lắp ráp các bean
    Duy trì sổ đăng kí các loại bean và các thành phần phụ thuộc của chúng
+ Container
    Nhận các hướng dẫn về những đối tượng cần khởi tạo, định cấu hình và lắp ráp bằng cách đọc siêu 
        dữ liệu cấu hình - configuration metadata(viết băng XML, Java annotation, Java code).
    Thể hiện các bean và sự phụ thuộc giữa chúng
+ Configuration metadata - Siêu dữ liệu cấu hình
    Viết băng XML, Java annotation, Java code
    Cho phép thể hiện object và sự phụ thuộc giữa các object đó
+ DI 
    DI dựa trên constructor dùng cho các phần phụ thuộc bắt buộc
    DI dựa trên setter dùng cho các phần phụ thuộc tù chọn( có thế đi kèm với @Autowired để tạo phụ 
        thuộc bắt buộc - không khuyến khích sử dụng)
+Java Reflection 
    Là một tính năng cho phép truy cập và sử dụng thông tin về một lớp hoặc đối tượng tại runtime. 
    Reflection có thể được sử dụng để: 
        - Lấy tên của các thuộc tính, phương thức và lớp.
        - Lấy kiểu dữ liệu của các thuộc tính, phương thức và lớp.
        - Gọi các phương thức.
        - Lấy và đặt các giá trị của các thuộc tính.
        - Khởi tạo các đối tượng.
        - Lấy các chú thích từ các lớp và đối tượng.
    Reflection nguy hiểm nếu không được sử dụng đúng cách. Nó có thể được sử dụng để truy cập các thành 
        phần của một lớp hoặc đối tượng mà bạn không nên truy cập, điều này có thể dẫn đến các vấn đề về bảo mật và hiệu suất.
+Spring AOT 
    Là một tính năng của Spring Boot cho phép biên dịch ứng dụng Spring thành mã nhị phân trước khi chạy. 
        => cải thiện hiệu suất. Do với java app, just-in-Time (JIT) biên dịch mã Java thành mã nhị phân tại runtime. 
        Quá trình này có thể tốn thời gian, đặc biệt là đối với các ứng dụng lớn. Còn AOT biên dịch thành mã nhị phân 
        trước runtime => loại bỏ sự cần thiết phải tải các lớp Java tại runtime
    Spring AOT còn có thể tối ưu hóa mã nhị phân cho phần cứng cụ thể 
    Spring AOT cũng có thể làm tăng kích thước của ứng dụng; do Spring AOT phải bao gồm mã nhị phân cho tất cả các lớp Java 
        được sử dụng trong ứng dụng.
    => Cần cân nhắc khi sử dụng AOT: 
        Nếu hiệu suất là quan trọng => Spring AOT
        Tuy nhiên, nếu kích thước của ứng dụng là quan trọng => không nên dùng AOT 
    Spring AOT được triển khai bằng cách sử dụng công cụ GraalVM  
+ GraalVM 
    Là một máy ảo đa ngôn ngữ (Java, Python, R, Go,...) được phát triển bởi Oracle . 
    GraalVM là một phiên bản của Java Runtime Environment(JRE) được xây dựng trên nền tảng của trình biên 
        dịch Just-in-Time (JIT). 
    GraalVM có thể biên dịch mã Java thành mã nhị phân gốc trước khi chạy, điều này có thể cải thiện hiệu suất của mã.
    Tuy nhiên GraalVM làm tăng kích thước của ứng dụng  

+AOP

A. Core 
1. IoC - Inversion of Control (DI - Dependency Injection)
    Là quá trình object xác định các dependencies của chúng (các object mà chúng làm việc cùng)
        thông qua contructor arguments, arguments của factory method, thuộc tính của đối tượng được xây 
        dựng hoặc của đối tượng trả về từ factory method
    Sau đó, IoC container sẽ tiêm các phụ thuộc đó khi nó tạo bean
    org.springframework.beans và org.springframework.context là cơ sở cho IoC container
    BeanFactory Interface cung cấp cơ chế cấu hình nâng cao, có khả năng quản lý bất kỳ đối tượng nào
    ApplicationContext là sub-interface của BeanFactory, giúp tích hợp dễ dàng hơn với AOP

        
